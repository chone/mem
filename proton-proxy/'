
//var nodeStatic = require('node-static').Server;
//var request = require("request");
//var dns = require("dns");
//var fileServer = new nodeStatic("../../");
var http = require("http");
var fs = require('fs');
var path = require('path');
var zlib = require('zlib');

var mimes = {
  "html": "text/html",
  "ico": "image/x-icon",
  "css": "text/css",
  "gif": "image/gif",
  "jpeg": "image/jpeg",
  "jpg": "image/jpeg",
  "js": "text/javascript",
  "json": "application/json",
  "pdf": "application/pdf",
  "png": "image/png",
  "svg": "image/svg+xml",
  "swf": "application/x-shockwave-flash",
  "tiff": "image/tiff",
  "txt": "text/plain",
  "wav": "audio/x-wav",
  "wma": "audio/x-ms-wma",
  "wmv": "video/x-ms-wmv",
  "xml": "text/xml"
};
var root = path.resolve(process.argv[1], '../../../'); 
var map = [];

http.createServer(handler).listen(80);

process.on('uncaughtException', function (err) {
  //打印出错误
  console.log(err);
  //打印出错误的调用栈方便调试
  //console.log(err.stack);
});

console.log('listen on 127.0.0.1');

function handler(req, res) {
  parser(req, res, function() {
    local(req, res, function() {
      remote(req, res);
    });
  });
}


function parser(req, res, back) {
  var len = map.length;
  for (var i = 0; i < len; i+=2) {
    if (map[i].exec('http://' + req.headers.host + req.url)) {
      var value = map[i+1];
      if (typeof value == 'object') {
	res.writeHeader(200);
	var content = JSON.stringify(value);
	var m = /\?.*callback=([^&]*)/.exec(req.url)
	if (m && m[1]) {
	  content =  m[1] + '(' + content + ');';
	}
	res.write(content);
	res.end();
      } else {
	// TODO: callback implements
	fs.createReadStream(map[i+1]).pipe(res);
      }
      return;
    }
  }
  back();
}

function local(req, res, back) {
  var url = path.resolve(root, '.' + req.url);
  fs.exists(url, function(exists) {
    if (exists) {
      // mime
      res.setHeader('Content-Type', 
	mimes[path.extname(url).replace('.', '')] || 'text/plain');
      fs.stat(url, function(err, stat) {
	// cache
	var last = stat.mtime.toUTCString();
	res.setHeader("Last-Modified", last);
	res.setHeader("Cache-Control", "max-age=86400");
	if (req.headers['if-modified-since'] == last) {
	  res.writeHead(304, 'Not Modified');
	  res.end();
	} else {
	  // deflate && gzip
	  var stream = fs.createReadStream(url);
	  var accept = req.headers['accept-encoding'];
	  if (/deflate/.exec(accept)) {
	    res.writeHead(200, {'Content-Encoding': 'deflate'});
	    stream.pipe(zlib.createDeflate()).pipe(res);
	  } else if (/gzip/.exec(accept)) {
	    res.writeHead(200, {'Content-Encoding': 'gzip'});
	    stream.pipe(zlib.createGzip()).pipe(res);
	  } else {
	    stream.pipe(res);
	  }
	}
      });
    } else {
      back();
    }
  });
}

function remote(req, res) {
  // TODO: proxy
}

// paths
function paths() {
  fs.readFile('./paths.js', function(err, content) {
    try {
      var obj = eval('(' + content + ')');
      map = [];
      for (key in obj) {
	map.push(new RegExp(key));
	map.push(obj[key]);
      }
      console.log(map);
    } catch(e) {}
  });
}

paths();
fs.watchFile('./paths.js', function() {
  paths();
});

//////////////////

function server(req, res) {
  local(req, res);

  return;
  req.addListener('end', function() {
    var url;
    if (/http/.exec(req.url)) {
      url = req.url;
    } else {
      url = 'http://' + req.headers.host + req.url;
    }
    //console.log(url)
    console.log('\x1B[32m%s\x1B[39m', url)
    console.log(req.headers.cookie)
    console.log(req.headers['user-agent'])
	try {
	  var paths = {};//getPaths();
	  if (paths) {
	  var keys = Object.keys(paths);
	  var path;
	  keys.forEach(function(item) {
	    var regx = new RegExp(item);
	    if (regx.exec(url)) {
	      path = item;
	    }
	  });
	  var p = paths[path]; 
	  if (p) {
	    var content = loadPath(p);
	    if (content) {
	      var matcher = url.match(/callback=([^&]*)/);
	      if (matcher && matcher[1]) {
		content = /callback=([^&]*)/
	      }
	      res.writeHeader(200, 'application/x-javascript');
	      res.write(content);
	      res.end();
	      console.log('\x1B[32m%s\x1B[39m', url)
	      console.log('\x1B[32m%s\x1B[39m', ' --> ' + p);
	    }
	  } else {
	    //console.log(url);
	  }
	  }
	} catch(e) {
	  //console.log(e)
	  console.log(e.stack);
	}

        fileServer.serve(req, res, function(err, result) {
	  try {
            if (err && (err.status === 404)) {
            //本地没有文件访问线上，透明server
            dns.resolve4(req.headers.host,function(err,addresses){
		try {
                if(err){
                    res.writeHeader(200,'text/html');   
                    res.write(req.url);
                    res.end(err);
                 }else{
                    var ip = addresses[0];
		    var url;
		    console.log(req.url);
		    if (/http/.exec(req.url)) {
		      url = req.url;
		    } else {
		      //url = 'http://' + ip + req.url;
		    }
                    //req.headers['Host'] = req.headers.host;
                    try{
                      request({
			  host: req.headers.host,
                          method: req.method,
                          url: url,
                          headers:req.headers
                      }).pipe(res);
                    }catch(e){
                      console.log(e)
                    }
                  } 
		} catch(e) {}
            });
            }
	  } catch(e) {}
        });
    }).resume();

}




function getPaths() {
  var content;
  try {
    content = fs.readFileSync('./paths.js');
  } catch(e) {
  } 
  return eval('(' + content + ')');
}

function loadPath(path) {
  if (typeof path == 'object') {
    return loadPathObject(path);
  } else {
    return loadPathFile(path);
  }
}

function loadPathObject(path) {
  var namespace = path.namespace;
  if (!namespace) {
    return JSON.stringify(path);
  }
  var content = '';
  var main = namespace.replace(/\./g, '/');
  // style
  if (namespace.match(/\.css\./)) {
    content = fs.readFileSync('../' + main + '.css', 'utf-8');
    content = content.replace(/([\/\.])*\/css/g, '/plu/css');
  } else {
    content = fs.readFileSync('../plu/base.js', 'utf-8');
    content += 'document.write(\'<script src="../' + main + '.js"></script>\');';
    content += 'document.write(\'<script > window.onload = ' + namespace + ';</script>\');';
  }
  return content;
}

function loadPathFile(path) {
  var content = fs.readFileSync(path, 'utf-8');
  return content;
}
